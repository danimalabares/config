global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def tx():
      return vim.eval('vimtex#syntax#in_mathzone()') == '0'
endglobal

context "math()" 
snippet rH "cohomology" i
\tilde{H}^{$1}($2,$3)$4
endsnippet

context "math()"
snippet HH "cohomology2" iA
H^{$1}($2)$0
endsnippet

priority 2
context "math()"
snippet hh "homology2" iA
h^{$1}($2)$0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ',')',':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[${1:${VISUAL}}\]$0
endsnippet

context "math()"
snippet mc "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mf "mathfrak" iA
\mathfrak{$1}$0
endsnippet

context "math()"
snippet tx "text" iA
\text{$1} $0
endsnippet

context "math()"
snippet se "set" iA
\\{$1\\}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^','|']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction"
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1
context "math()"
snippet sto "to" iA
\to 
endsnippet

priority 2
context "math()"
snippet to "longto" iA
\longrightarrow`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet


context "math()"
snippet xn "nth variable" iA
x_n
endsnippet

#context "math()"
#snippet '([A-Za-z])!' "autosubscript" wrA
#_`!p snip.rv = match.group(1)`
#endsnippet

priority 1
context "math()"
snippet '([A-Za-z])N' "autosuperscript" wrA
`!p snip.rv = match.group(1)`^n
endsnippet

priority 2
context "math()"
snippet TN "Tangent" iA
TN
endsnippet


context "math()"
snippet '([A-Za-z])J' "autosuperscript" wrA
`!p snip.rv = match.group(1)`^j
endsnippet

context "math()"
snippet '([A-Za-z])I' "autosuperscript" wrA
`!p snip.rv = match.group(1)`^i
endsnippet


context "math()"
snippet '([A-Za-z])jj' "autosubscript" wrA
`!p snip.rv = match.group(1)`_j
endsnippet

context "math()"
snippet '([A-Za-z])tt' "autosubscript" wrA
`!p snip.rv = match.group(1)`_t
endsnippet

context "math()"
snippet '([A-Za-z])ii' "autosubscript" wrA
`!p snip.rv = match.group(1)`_i
endsnippet

context "math()"
snippet '([A-Za-z])mm' "autosubscript" wrA
`!p snip.rv = match.group(1)`_m
endsnippet

context "math()"
snippet '([A-Za-z])nn' "autosubscript" wrA
`!p snip.rv = match.group(1)`_n
endsnippet

context "math()"
snippet '([A-Za-z])kk' "autosubscript" wrA
`!p snip.rv = match.group(1)`_k
endsnippet

priority 2
context "math()"
snippet 'S(\d)' "autosphere" wrA
S^`!p snip.rv = match.group(1)`$0
endsnippet
priority 2
context "math()"
snippet 'mathbb{S}(\d)' "autosphere" wrA
mathbb{S}^`!p snip.rv = match.group(1)`$0
endsnippet

priority 1
context "math()"
snippet '([A-Za-z])(\d)' "autosubscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`$0
endsnippet

#snippet '([A-Za-z])^(\d\d)' "autosubscript2" wrA
#`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
#endsnippet

context "math()"
snippet ^^ "superscript3" iA
^{$1}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Sn "sphere" iA
S^{n$1}$0
endsnippet

context "math()"
snippet @ "superscript" iA
^
endsnippet

context "math()"
snippet ^^ "long superscript" options
^{$1}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet


context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet -- "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ker "kernel" iA
\ker`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet cok "coker" iA
\operatorname{coker}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet exp "exponent" iA
\operatorname{exp}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet img "image" iA
\operatorname{img}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet π "pi" iA
\pi
endsnippet

context "math()"
snippet [[ "sq parenthesis" iA
[$1]$0
endsnippet

context "math()"
snippet os "oplus" iA
\oplus 
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet mat "pmat" wA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet sqmat "square matrix" iA
\begin{pmatrix}$1&$2\\\$3&$4\end{pmatrix}$0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

priority 100
context "math()"
snippet lrp "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

priority 2
context "math()"
snippet blrp "left( right)" iA
\big( ${1:${VISUAL}} \big) $0
endsnippet

priority 2
context "math()"
snippet BL "left( right)" iA
\Big( ${1:${VISUAL}} \Big) $0
endsnippet


context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet SE "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet
context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrs "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<$1\right>`!p
if t[1] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet sum "sum" iA
\sum_{$1}$2
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" iA
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet
context "math()"
snippet prod "product" iA
\prod_{$1} ${2:${VISUAL}} $0
endsnippet

context "math()"
snippet bigo "direct sum" iA
\bigoplus_{${1:n=${2:1}}} ${2:${VISUAL}} $0
endsnippet

context "math()"
snippet sqr "\sqrt{}" iA
\sqrt{$1}`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet td "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet op "operator" iA
\operatorname{$1}$0
endsnippet

snippet fun "function" i
$$1:$2\to $3$
endsnippet

snippet Fun
\[$1:$2\longrightarrow $3\]
$0
endsnippet

context "math()"
snippet fun "function" i
$1:$2\to $3 
endsnippet

context "math()"
snippet oo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet ll "l" iA
\ell
endsnippet

context "math()"
snippet nab "abla" iA
\nabla`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet AA "affine" iA
\mathbb{A}^$1`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet nor "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet nt "not" iA
\not
endsnippet


priority 300
context "math()"
snippet int "integral" wA
\int_{$1}$0
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus 
endsnippet

snippet >> ">>" iA
\gg`!p
if t[2] and t[2][0] not in ['0','1','2','3','4','5','6','7','8','9',',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet << "<<" iA
\ll`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

snippet || "mid" iA
\mid 
endsnippet

context "math()"
snippet cc "subset" Ai
\subset`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet cec "subseteq" Ai
\subseteq`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet zez "supset" iA
\supseteq`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet zz "supset" iA
\supset`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet inn "in " iA
\in`!p
if t[2] and t[2][0] not in ['\\',',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet nii "ni" iA
\ni`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0 
endsnippet

context "math()"
snippet nin "not in" iA
\notin`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet nq "neq" iA
\neq 
endsnippet
#context "math()"
#snippet nq "neq" iA
#\neq `!p
#if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
#     snip.rv = ' '
#else:
#     snip.rv = ''
#`$0
#endsnippet

context "math()"
snippet ww "cap" iA
\cap`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "math()"
snippet uu "cup" iA
\cup 
endsnippet

context "math()"
snippet UU "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

priority 2
context "math()"
snippet WW "Omega...for now" iA
\Omega^{$1}($2)`!p
if t[3] and t[3][0] not in [',', '$','.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$3
endsnippet

context "math()"
snippet XX "vector fields" iA
\mathfrak{X}`!p
if t[2] and t[2][0] not in [',', '$','.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Ww "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\mathcal{O}
endsnippet

context "math()"
snippet mb "mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet bf "mathbf" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet CC "complex" iA
\mathbb{C}
endsnippet

context "math()"
snippet CP "complex projective space" iA
\mathbb{C}P^{$1}$0
endsnippet

context "math()"
snippet Cn "complex" iA
\mathbb{C}^{$1}
endsnippet

context "math()"
snippet rn "reals" iA
\mathbb{R}^{$1}
endsnippet

context "math()"
snippet cn "complexes" iA
\mathbb{C}^{$1}
endsnippet

context "math()"
snippet pn "projectives" iA
\mathbb{P}^
endsnippet


context "math()"
snippet Ss "sphere" iA
\Sigma`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "math()"
snippet SS "SS" iA
\mathbb{S}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "math()"
snippet KK "what is this one?" iA
\mathbb{K}
endsnippet

context "math()"
snippet RR "real" iA
\mathbb{R}
endsnippet

context "math()"
snippet RP "projective space" iA
\mathbb{R}P^{$1}$0
endsnippet

snippet Rn "Rn" iA
$\mathbb{R}^{$1}$$0
endsnippet

context "math()"
snippet QQ "Q" iA
\mathbb{Q}
endsnippet

context "math()"
snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

context "math()"
snippet DD "D" iA
\mathcal{D}
endsnippet

context "math()"
snippet NN "n" iA
\mathbb{N}
endsnippet

context "math()"
snippet PP "p" iA
\mathbb{P}
endsnippet

context "math()"
snippet ee "exists" iA
\exists 
endsnippet

context "math()"
snippet aa "forall" iA
\forall 
endsnippet

snippet Bif "Big function" iA
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $5
endsnippet

snippet bif "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $5
\end{align*}
$0
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet ovl "overline" iA
\overline{$1}$0
endsnippet
priority 10
context "math()"
snippet ol "overline" iA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])br" "bar" riA
\bar{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])tl" "bar" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet bar "bar" iA
\bar{$1}`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^',')']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet


priority 10
context "math()"
snippet "hat" "hat" iA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" iA
endsnippet

context "math()"
snippet imp "implies" iA
\implies 
endsnippet

context "math()"
snippet imd "implied by" iA
\impliedby
endsnippet

priority 2
context "math()"
snippet iff "iff" iA
\iff
endsnippet

snippet // "Fraction" 
\\frac{$1}{$2}$0
endsnippet

priority 1
context "math()"
snippet ff "Fraction" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet df "dfrac" i
\dfrac{${1:num}}{${2:den}}$0
endsnippet

#snippet == "equals" iA
#&= $1 \\\\
#endsnippet

context "math()"
snippet ... "ldots" iA
\ldots`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 1
context "math()"
snippet bca "cases" iA
\begin{cases}
	$1\qquad &$2 \\\
	$3\qquad &$4
\end{cases}
endsnippet

context "math()"
snippet fund "fundamental group" iA
\pi_1(X,x_0)
endsnippet

context "math()"
snippet pij "pi_n" iA
\pi_{$1}($2)`!p
if t[3] and t[3][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$3
endsnippet

context "tx()"
snippet pin "pi_n" iA
$\pi_{$1}($2}$`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "math()"
snippet cg "cong" iA
\cong 
endsnippet

context "math()"
snippet til "tilde" iA
\tilde{$1}$0
endsnippet

context "math()"
snippet Til "tilde" iA
\widetilde{$1}$0
endsnippet

context "math()"
snippet hk "hookrightarrow" iA
\hookrightarrow 
endsnippet

context "math()"
snippet qd "quad" iA
\qquad 
endsnippet

context "math()"
snippet Qd "quad" iA
\quad 
endsnippet

context "math()"
snippet lq "geq" iA
\leq 
endsnippet

context "math()"
snippet gq "geq" iA
\geq 
endsnippet

context "math()"
snippet bul "bullet" iA
\bullet
endsnippet

context "math()"
snippet dl "del" iA
\partial`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet hat "hat" iA
\hat{$1}$0
endsnippet

context "math()"
snippet cic "circ" iA
\circ 
endsnippet

priority 10000
context "math()"
snippet dbar "dbar" iA
\bar\partial`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 10
context "math()"
snippet csep "column sep" iA
column sep=$1
endsnippet

context "math()"
snippet CO "color"
{\color{$1}$2}$0
endsnippet

snippet fib "fibration" i
$$1\hookrightarrow $2\to $3$$0
endsnippet

snippet Fib "fibration" i
\[$1\hookrightarrow $2\to $3\]
$0
endsnippet

snippet rH "reduced homology" iA
\widetilde{H}_{$1}($2)$0
endsnippet

priority 1
context "math()"
snippet ot "otimes" iA
\otimes`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet vv "vee" iA
\vee 
endsnippet

snippet sc "sections" i
\Gamma($1,$2)$0
endsnippet

priority 200
context "math()"
snippet SK "substacks" iA
\substack{$1 \\\ $2}$0
endsnippet

context "math()"
snippet ovs "overset" iA
\overset{$1}{$2}$0
endsnippet

priority 1
context "math()"
snippet cv "curvearrowright" iA
\curvearrowright`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 2
context "math()"
snippet lcv "curvearrowright" iA
\curvearrowleft`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet



priority 1
context "math()"
snippet dim "dimension" iA
\dim 
endsnippet

priority 2
context "math()"
snippet codim "Description" iA
\operatorname{codim}
endsnippet


context "math()"
snippet sm "sim" iA
\sim`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet cup "smile!" options
\smile`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet


context "math()"
snippet £ "cdot" iA
\cdot`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 1
context "math()"
snippet sg "squigarrow" iA
\rightsquigarrow 
endsnippet

snippet MM "manifold" iA
$M$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
     snip.rv = ' '
else:   
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet we "wedge" iA
\wedge 
endsnippet


context "math()"
snippet vwg "varowedge" iA
\varowedge 
endsnippet

context "math()"
snippet Gr "grassmannian" iA
\operatorname{Gr}($1)
endsnippet

priority 1
context "math()"
snippet mt "mapsto" iA
\mapsto 
endsnippet

priority 2
context "math()"
snippet lmt "longmapsto" iA
\longmapsto`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet abs "abs" iA
|${1}|`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ','^']:
     snip.rv = ' '
else:   
    snip.rv = ''
`$2
endsnippet

context "math()"
snippet vd "vdits" iA
\vdots 
endsnippet

context "math()"
snippet K3 "K" iA
K(\mathbb{Z},3)
endsnippet

context "math()"
snippet K2 "K" iA
K(\mathbb{Z},2)
endsnippet

context "math()"
snippet bk "backslash" iA
\backslash 
endsnippet

context "math()"
snippet sime "simeq" iA
\simeq 
endsnippet

context "math()"
snippet qq "^-1" iA
\mathfrak{q}
endsnippet

context "math()"
snippet § "-1" iA
^{-1}
endsnippet


context "math()"
snippet hofib "hofib" iA
\hofib 
endsnippet

context "math()"
snippet det "det" iA
\det 
endsnippet

priority 2
context "math()"
snippet prp "perp" iA
\perp`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet ve "varepsilon" iA
\varepsilon
endsnippet

context "math()"
snippet vp "varphi" iA
\varphi
endsnippet


context "math()"
snippet pm "pm" iA
\pm 
endsnippet

context "math()"
snippet cs "cosine" iA
\cos 
endsnippet

context "math()"
snippet sn "sine" iA
\sin 
endsnippet

context "math()"
snippet ± "el 11 no aparece mucho" iA
^{$1}`!p
if t[2] and t[2][0] not in ['(',',', '.', '_', '?', '-', ' ']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet ~ "el 11 no aparece mucho" iA
^{$1}`!p
if t[2] and t[2][0] not in ['(',',', '.', '_', '?', '-', ' ']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet


priority 1
context "math()"
snippet GL "gl" iA
\operatorname{GL}($1)
endsnippet

priority 2
context "math()"
snippet PGL "an operator" iA
\operatorname{PGL}($1)
endsnippet


context "math()"
snippet SO "so" iA
\operatorname{SO}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Un "Unitary" iA
\operatorname{U}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Spin "spin" iA
\operatorname{Spin}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet SU "special unitary" iA
\operatorname{SU}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet On "Orthogonal" iA
\operatorname{O}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 1
context "math()"
snippet SL "SL" iA
\operatorname{SL}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 2
context "math()"
snippet PSL "SL" iA
\operatorname{PSL}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Sp "simpletico" iA
\operatorname{Sp}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet
context "math()"
snippet Spn "Sp" iA
\operatorname{Sp}($1)$0
endsnippet

context "math()"
snippet id "identity" iA
\operatorname{id}
endsnippet


context "math()"
snippet St "star" iA
^*`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet
context "math()"
snippet st "star" iA
^*`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet ss "star" iA
^*`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet ts "tsar" iA
_*`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet sa "tsar" iA
_*`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet


context "math()"
snippet tra "transpose" iA
^{\mathbf{T}}`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet hb "hbar" iA
\hbar`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet \g "lie algebra" iA
\mathfrak{g}
endsnippet

context "math()"
snippet Nab "nabla" iA
\nabla_{$1}$2`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(',')']:
     snip.rv = ' '
else:
     snip.rv = ''
`
endsnippet

context "math()"
snippet hes "Description" iA
\nabla^{2}$1
endsnippet

context "math()"
snippet Br "bbracket" iA
\llbracket $1\rrbracket
endsnippet

context "math()"
snippet llr "longleftrightarrow" iA
\longleftrightarrow 
endsnippet

priority 2
context "math()"
snippet lsg "longsquigrightarrow" iA
\longsquigrightarrow
endsnippet


context "math()"
snippet R2 "R2" iA
\mathbb{R}^2`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "math()"
snippet R3 "R3" iA
\mathbb{R}^3`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "math()"
snippet lap "laplacian" iA
\Delta`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^',')']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "math()"
snippet oC "Ocal" iA
\mathcal{O}($1)`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$3
endsnippet

context "math()"
snippet oc "Ocal" iA
\mathcal{O}
endsnippet


context "math()"
snippet qde "qdet" iA
\operatorname{qdet}
endsnippet
context "math()"
snippet iso "iso" iA
\operatorname{Iso}(\mathbb{H}^2)
endsnippet

context "math()"
snippet Hh "hyperbolic" iA
\mathbb{H}^{$1}
endsnippet

snippet tex "texorpdfstring" iA
\texorpdfstring{$1}{$2}$0
endsnippet

priority 1
context "math()"
snippet ald "aligned" iA
\begin{aligned}
$1
\end{aligned}
endsnippet

snippet tk "Description" i
\begin{tikzcd}$1\end{tikzcd}$0
endsnippet

priority 1
context "math()"
snippet do "dot" iA
\dot 
endsnippet

priority 2
context "math()"
snippet ddo "ddot" iA
\ddot 
endsnippet

priority 3
context "math()"
snippet dddo "dddot" iA
\dddot 
endsnippet

priority 3
context "math()"
snippet am "ampersand" iA
&`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet fl "flat" iA
^\flat`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet sh "sharp" iA
^\sharp`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet longr "longrightarrow" iA
\longrightarrow`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "math()"
snippet Rs "restriction" iA
\Big|_{$1}
endsnippet

context "math()"
snippet rs "restriction" iA
|_{$1}
endsnippet

context "math()"
snippet RS "restructuib" iA
\left. $1 \right|_{$2}
endsnippet


context "math()"
snippet ub "underbrace" iA
\underbrace{$1}_{$2}
endsnippet

context "math()"
snippet Cong "cong specific" iA
\overset{$1}{\cong}
endsnippet

context "math()"
snippet To "overset name" iA
\overset{$1}{\longrightarrow}
endsnippet

context "math()"
snippet xt "xto" iA
\xrightarrow{$1}$0
endsnippet


context "math()"
snippet Hk "Hook" iA
\overset{$1}{\hookrightarrow}$0
endsnippet


context "math()"
snippet cin "cinfinity" iA
\mathcal{C}^\infty($1)
endsnippet

context "math()"
snippet pd "partial derivative" iA
\frac{\partial $1}{\partial $2}$0
endsnippet
context "math()"
snippet par "partial derivative" iA
\frac{\partial $1}{\partial $2}$0
endsnippet

context "math()"
snippet dd "derivative" iA
\frac{d$1}{d$2}$0
endsnippet


context "math()"
snippet pc "Pic" iA
\operatorname{Pic}($1)$0
endsnippet

context "math()"
snippet FF "sheaf" iA
\mathcal{F}
endsnippet

context "math()"
snippet gr "grad" iA
\operatorname{gr}
endsnippet

context "math()"
snippet bin "bim" iA
\binom{$1}{$2}$0
endsnippet

context "math()"
snippet == "&=" iA
&=
endsnippet

context "math()"
snippet ++ "amp+" iA
&+
endsnippet


context "math()"
snippet ni "ni" iA
\ni`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet rev "reverse" iA
reverse
endsnippet

context "math()"
snippet fn "fun" iA
\operatorname{fun}
endsnippet

priority 101
context "math()"
snippet das "dashed" iA
dashed
endsnippet

context "math()"
snippet el "exterior" iA
\Lambda^{$1}($2)`!p
if t[3] and t[3][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$3
endsnippet

context "math()"
snippet nt "not" iA
\not
endsnippet

context "math()"
snippet VV "zero sets" iA
\mathbb{V}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet An "annihilator" iA
\operatorname{Ann}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Ch "chern character" iA
\operatorname{Ch}_{\cdot}($1)
endsnippet

context "math()"
snippet Td "todd character" iA
\operatorname{Td}_{\cdot}($1)
endsnippet

context "math()"
snippet ho "hook" iA
hook
endsnippet

context "math()"
snippet bti "begin tikz" bA
\[\begin{tikzcd}
endsnippet

context "math()"
snippet eti "end tikzcd" iA
\end{tikzd}\]
endsnippet


context "math()"
snippet ip "interior product" iA
i_{$1}$2`!p
if t[3] and t[3][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$3
endsnippet

context "math()"
snippet aray "array" iA
\begin{array}
	$1
\end{array}
endsnippet

priority 1
context "math()"
snippet hh "algebra de lie" iA
\mathfrak{h}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet gl "algebra de lie" iA
\mathfrak{gl}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet
context "math()"
snippet gg "algebra de lie" iA
\mathfrak{g}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet on "algebra de lie" iA
\mathfrak{o}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet sl "algebra de lie" iA
\mathfrak{sl}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet so "algebra de lie" iA
\mathfrak{so}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet sp "algebra de lie" iA
\mathfrak{sp}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Lie "lie algabra" iA
\operatorname{Lie}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet un "algebra de lie" iA
\mathfrak{u}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet sun "algebra de lie" iA
\mathfrak{su}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet Dif "Diffeos" iA
\operatorname{Dif}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet LL "Lie" iA
\mathcal{L}_{$1}
endsnippet

context "math()"
snippet bp "big parentheseis" iA
\big($1\big)
endsnippet

context "math()"
snippet Bp "Big pa" iA
\Big($1)\Big)
endsnippet

priority 2
context "math()"
snippet bald "Description" iA
\begin{aligned}
endsnippet

priority 3
context "math()"
snippet eald "algd" iA
\end{aligned}
endsnippet

context "math()"
snippet Pic "picard" iA
\operatorname{Pic}($1)`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet mm "ideal" iA
\mathfrak{m}_$1
endsnippet

context "math()"
snippet Aut "Automorph" iA
\operatorname{Aut}($1)
endsnippet

context "math()"
snippet Fix "fixed" iA
\operatorname{Fix}($1)
endsnippet

context "math()"
snippet NS "neron severi" iA
\operatorname{NS}($2)
endsnippet

context "math()"
snippet vc "vacio" iA
\varnothing
endsnippet
context "math()"
snippet ey "vacio" iA
\varnothing
endsnippet

context "math()"
snippet EE "Description" iA
\mathcal{E}
endsnippet

context "math()"
snippet ord "order" iA
\operatorname{ord}($1)
endsnippet

context "math()"
snippet Cp "cp infinty" iA
\mathbb{C}P^\infty
endsnippet

context "math()"
snippet Bf "fundamental bundle" iA
B_{\operatorname{fun}}
endsnippet

context "math()"
snippet B( "bigleft" iA
\Big(
endsnippet

context "math()"
snippet B) "big)" iA
\Big)
endsnippet

priority 1
context "math()"
snippet lp "bigleft" iA
\left(
endsnippet

priority 1
context "math()"
snippet rp "big)" iA
\right)
endsnippet

context "math()"
snippet eali "end align" iA
\end{align*}
endsnippet

context "math()"
snippet Def "Deform" iA
\operatorname{Def}_{$1}
endsnippet

context "math()"
snippet maps "maps to" iA
maps to
endsnippet

context "math()"
snippet Ad "adj" iA
\operatorname{Ad}
endsnippet

context "math()"
snippet ad "adj" iA
\operatorname{ad}
endsnippet

context "math()"
snippet Per "Description" iA
\mathbb{P}\operatorname{er}
endsnippet

context "math()"
snippet Hom "Description" iA
\operatorname{Hom}($1)
endsnippet

context "math()"
snippet Re "Description" iA
\operatorname{Re}($1)
endsnippet

context "math()"
snippet Im "I" iA
\operatorname{Im}($1)
endsnippet

context "math()"
snippet Teich "iA" iA
\operatorname{Teich}
endsnippet

context "math()"
snippet Proj "Proj" iA
\operatorname{Proj}($1)
endsnippet

context "math()"
snippet PRoj "Proj" iA
\operatorname{Proj}
endsnippet

context "math()"
snippet pp "pp" iA
\mathfrak{p}
endsnippet

context "math()"
snippet Bir "bir" iA
\operatorname{Bir}($1)
endsnippet

context "math()"
snippet rk "Description" iA
\operatorname{rk}($1)
endsnippet

context "math()"
snippet disc "Description" iA
\operatorname{disc}($1)
endsnippet

context "math()"
snippet div "Description" iA
\operatorname{div}($1)
endsnippet

context "math()"
snippet Der "der" iA
\operatorname{Der}($1)
endsnippet

context "math()"
snippet Bl "blow" iA
\operatorname{Bl}_$1
endsnippet

context "math()"
snippet Pf "an operator" iA
\operatorname{Pf}($1)
endsnippet

context "math()"
snippet bw "bigwedge" iA
\bigwedge`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 100
context "math()"
snippet supp "an operator" iA
\operatorname{supp}($1)
endsnippet


context "math()"
snippet eq "equiv" iA
\equiv`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 10
context "math()"
snippet Isom "an operator" iA
\operatorname{Isom}($1)
endsnippet

priority 10
context "math()"
snippet cop "coproduct" iA
\coprod
endsnippet

context "math()"
snippet cpol "Cpolu" iA
\mathbb{C}[z_1,\ldots,z_n]
endsnippet

context "math()"
snippet Sec "an operator" iA
\operatorname{Sec}($1)
endsnippet

context "math()"
snippet b( "parenthesis" iA
\big(
endsnippet
context "math()"
snippet b) "parenthesis" iA
\big)
endsnippet
context "math()"
snippet B( "parenthesis" iA
\Big(
endsnippet
context "math()"

priority 1
context "math()"
snippet sc "sections" iA
\Gamma($1)
endsnippet

context "tx()"
snippet vma "varphi map" iA
$\varphi:$1\longrightarrow $2$`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet
context "tx()"
snippet fma "f map" iA
$f:$1\longrightarrow $2`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet deg "an operator" iA
\operatorname{deg}
endsnippet

context "math()"
snippet bsq "Description" iA
\bigsqcup
endsnippet

snippet jn "paran" iA
($1)
endsnippet

context "math()"
snippet dto "dashed to, ration" iA
\dashrightarrow

endsnippet

context "math()"
snippet !! "" iA
^\Omega
endsnippet

context "tx()"
snippet hsp "hspace" iA
\hspace{$1}
endsnippet

context "tx()"
snippet pif "pi function" iA
$\pi:$1\longrightarrow $2$
endsnippet

context "math()"
snippet red "Description" iA
\operatorname{red}
endsnippet

priority 101
context "math()"
snippet sas "subast" iA
_*
endsnippet

context "math()"
snippet pi "pi" iA
\pi
endsnippet

context "math()"
snippet om "omega" iA
\omega
endsnippet

context "math()"
snippet Om "Omega" iA
\Omega
endsnippet

priority 101
context "math()"
snippet tas "iA" iA
ta^*
endsnippet
priority 103
context "math()"
snippet ˆ "alph" iA
\iota
endsnippet

priority 100
context "math()"
snippet as "asterisk" iA
*
endsnippet


context "math()"
snippet å "alph" iA
\alpha
endsnippet

context "math()"
snippet ∫ "alph" iA
\beta
endsnippet

context "math()"
snippet © "alph" iA
\gamma
endsnippet

priority 4
context "math()"
snippet gam "gamma" iA
\gamma
endsnippet


context "math()"
snippet ¥ "psi" iA
\psi
endsnippet

context "math()"
snippet ps "psi" iA
\psi
endsnippet


context "math()"
snippet Á "PSi" iA
\Psi
endsnippet


context "math()"
snippet ∂ "alph" iA
\delta
endsnippet

context "math()"
snippet ´ "alph" iA
\varepsilon
endsnippet

context "math()"
snippet ƒ "alph" iA
\phi
endsnippet

context "math()"
snippet ˙ "alph" iA
\eta
endsnippet

context "math()"
snippet ˚ "alph" iA
\kappa
endsnippet

context "math()"
snippet ¬ "alph" iA
\lambda
endsnippet

context "math()"
snippet la "alph" iA
\lambda
endsnippet

context "math()"
snippet ˜ "alph" iA
\nu
endsnippet

context "math()"
snippet ø "alph" iA
\omega
endsnippet

context "math()"
snippet ∑ "alph" iA
\omega
endsnippet

context "math()"
snippet ® "alph" iA
\rho
endsnippet

context "math()"
snippet ß "alph" iA
\sigma
endsnippet

context "math()"
snippet † "alph" iA
\tau
endsnippet

context "math()"
snippet ≈ "alph" iA
\xi
endsnippet

context "math()"
snippet Ω "alph" iA
\dseta
endsnippet

context "math()"
snippet ˝ "alph" iA
\Gamma
endsnippet

context "math()"
snippet Ï "alph" iA
\Phi
endsnippet

context "math()"
snippet Ò "alph" iA
\Lambda
endsnippet
context "math()"
snippet La "alph" iA
\Lambda
endsnippet

context "math()"
snippet ∏ "alph" iA
\Pi
endsnippet

context "math()"
snippet „ "alph" iA
\Omega
endsnippet

context "math()"
snippet Ø "alph" iA
\Omega
endsnippet

context "math()"
snippet œ "theta" iA
\theta
endsnippet

context "math()"
snippet µ "m" iA
\mu
endsnippet

context "math()"
snippet Í "Sigma" iA
\Sigma
endsnippet

context "math()"
snippet √ "Sigma" iA
\nu
endsnippet

priority 2
context "math()"
snippet iot "iota" iA
\iota
endsnippet

#Here come the text snippets I had already done

snippet preamble "preamble" i
\include{/Users/daniel/github/config/preamble.sty}
\include{/Users/daniel/github/config/thms.sty}
\include{/Users/daniel/github/config/ops.sty}
endsnippet

snippet center "center" i
\begin{center}
	$1
\end{center}$0
endsnippet

snippet beg "begin{} / end{}" 
\begin{$1}
	$0
\end{$1}$2
endsnippet

priority 1
snippet thm "theorem" bA
\begin{thm}\leavevmode
	$1
\end{thm}$0
endsnippet

snippet Thm "theorem" bA
\begin{thm}[$1]\leavevmode
	$2
\end{thm}$0
endsnippet

snippet Prop "proposition" bA
\begin{prop}[$1]\leavevmode
	$2
\end{prop}$0
endsnippet

snippet prop "proposition" bA
\begin{prop}\leavevmode
	$1
\end{prop}$0
endsnippet

snippet lde "" bA
\begin{defn}\leavevmode
	$1
\end{defn}$0
endsnippet
snippet Defn "" bA
\begin{defn}[$1]\leavevmode
	$2
\end{defn}$0
endsnippet

snippet defn "" bA
\begin{defn}\leavevmode
	$1
\end{defn}$0
endsnippet

snippet lem "" bA
\begin{lemma}\leavevmode
	$1
\end{lemma}$0
endsnippet

snippet lqst "" bA
\begin{question}\leavevmode
	$1
\end{question}$0
endsnippet
snippet Qst "" bA
\begin{question}[$1]\leavevmode
	$2
\end{question}$0
endsnippet
snippet qst "" bA
\begin{question}\leavevmode
	$1
\end{question}$0
endsnippet

snippet cl "" bA
\begin{claim}\leavevmode
	$1
\end{claim}$0
endsnippet

context "tx()"
snippet Coro "corollary" bA
\begin{coro}[$1]\leavevmode
	$2
\end{coro}$0
endsnippet

snippet lcoro "" bA
\begin{coro}\leavevmode
	$1
\end{coro}$0
endsnippet
snippet coro "" bA
\begin{coro}\leavevmode
	$1
\end{coro}$0
endsnippet

snippet Exa "" bA
\begin{example}[$1]\leavevmode
	$2
\end{example}$0
endsnippet

snippet lexa "" bA
\begin{example}\leavevmode
	$1
\end{example}$0
endsnippet
snippet exa "" bA
\begin{example}\leavevmode
	$1
\end{example}$0
endsnippet

snippet upshot "theorem" bA
\begin{upshot}\leavevmode
	$1
\end{upshot}$0
endsnippet

snippet Exer "" bA
\begin{exercise}[$1]\leavevmode
	$2
\end{exercise}$0
endsnippet

snippet exer "" bA
\begin{exercise}\leavevmode
	$1
\end{exercise}$0
endsnippet

snippet Mex "labeled manual numbering exercise" bA
\addcontentsline{toc}{subsection}{Exercise $1}
\begin{manualexercise}{$1}
	$2
\end{manualexercise}$0
endsnippet

snippet mex "manual numbering exercise" bA
\begin{manualexercise}{${1:number}}
	$2
\end{manualexercise}$0
endsnippet

context "tx()"
snippet mco "manual coro" bA
\begin{manualcorollary}{$1}
	$2
\end{manualcorollary}
endsnippet

context "tx()"
snippet Nth "named theorem" bA
\begin{namedthm*}{$1}[$2]\leavevmode
	$3
\end{namedthm*}
endsnippet

context "tx()"
snippet 'i(\d)' "idea1" wr
\begin{idea`!p snip.rv = match.group(1)`}{$1}\leavevmode
	$2
\end{idea`!p snip.rv = match.group(1)`}
endsnippet
context "tx()"
snippet 'I(\d)' "idea1" wr
\begin{idea`!p snip.rv = match.group(1)`}{$1}[$2]\leavevmode
	$3
\end{idea`!p snip.rv = match.group(1)`}
endsnippet
context "tx()"
snippet 'i(\d)(\d)' "idea1" wr
\begin{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}{$1}\leavevmode
	$2
\end{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}
endsnippet
context "tx()"
snippet 'I(\d)(\d)' "idea1" wr
\begin{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}{$1}[$2]\leavevmode
	$3
\end{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}
endsnippet

context "tx()"
snippet 'ai(\d)' "idea1" wr
\addcontentsline{toc}{subsection}{$1}
\begin{idea`!p snip.rv = match.group(1)`}{$1}\leavevmode
	$2
\end{idea`!p snip.rv = match.group(1)`}
endsnippet
context "tx()"
snippet 'AI(\d)' "idea1" wr
\addcontentsline{toc}{subsection}{$1}
\begin{idea`!p snip.rv = match.group(1)`}{$1}[$2]\leavevmode
	$3
\end{idea`!p snip.rv = match.group(1)`}
endsnippet
context "tx()"
snippet 'ai(\d)(\d)' "idea1" wr
\addcontentsline{toc}{subsection}{$1}
\begin{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}{$1}\leavevmode
	$2
\end{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}
endsnippet
context "tx()"
snippet 'AI(\d)(\d)' "idea1" wr
\addcontentsline{toc}{subsection}{$1}
\begin{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}{$1}[$2]\leavevmode
	$3
\end{idea`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)`}
endsnippet




context "tx()"
snippet prob "Problem" bA
\addcontentsline{toc}{subsection}{Problem $1}
\paragraph{Problem $1}$0
endsnippet


snippet mdef "manualdef" bA
\begin{manualdef}{${1:number}}
	$2
\end{manualdef}$0
endsnippet

snippet conj "" bA
\begin{conjecture}[$1]
	$2
\end{conjecture}$0
endsnippet

context "tx()"
snippet pf "proof" bA
\begin{proof}\leavevmode
	$1
\end{proof}$0
endsnippet


snippet dem "demostracao" bA
\begin{proof}[Demostração]
	$1
\end{proof}$0
endsnippet

snippet sol "" bA
\begin{proof}[Solution]\leavevmode
	$1
\end{proof}$0
endsnippet

snippet Pf "" bA
\begin{proof}[$1]
$2
\end{proof}$0
endsnippet

snippet ali "align" bA
\begin{align*}
	$1&=$2
\end{align*}$0
endsnippet

context "tx()"
snippet bali "begin align" bA
\begin{align*}
endsnippet

snippet eali "end align" bA
\end{align*}
endsnippet

snippet eq "equation" bA
\begin{equation*}
	$1
\end{equation*}$0
endsnippet

snippet Eq "equation" bA
\begin{equation}\label{eq:$1}
	$2
\end{equation}$0
endsnippet

snippet Rk "remark" bA
\begin{remark}[$1]\leavevmode
	$2
\end{remark}$0
endsnippet

snippet rk "remark" bA
\begin{remark}
	$1
\end{remark}$0
endsnippet

snippet pgp
\paragraph{$1} $2
endsnippet

priority 3
snippet bi "bold-italic" w
\textit{\textbf{${1}}}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ',':',')']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

priority 1
context "tx()"
snippet b "bold" w
\textbf{$1}`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

priority 1
context "tx()"
snippet i "italic" w
\textit{$1}`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

snippet hr "hyperref" i
\href{$1}{$2}`!p
if t[3] and t[3][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$3
endsnippet

snippet ct "cite" i
\cite{$1}$2
endsnippet

#snippet @ "exponent" iA
#^
#endsnippet

#snippet ^ "at" iA
#@
#endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $1

	\item $2
\end{enumerate}
endsnippet

snippet aen "Enumerate using letters" bA
\begin{enumerate}[label=\alph*.]
	\item $1
\end{enumerate}
endsnippet


snippet ien "Enumerate using i,ii,iii..." bA
\begin{enumerate}[label=(\roman*)]
	\item $1
\end{enumerate}
endsnippet

snippet nenum "Enumerate start at *" bA
\begin{enumerate}[($1)]\setcounter{enumi}{${2:one before}}
	\item $2
\end{enumerate}
endsnippet

snippet step "steps" bA
\begin{enumerate}[label=\textbf{Step \arabic*}]
	\item $1
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
\item $1
\end{itemize}
endsnippet

snippet sec "section" bA
\section{$1}
$0
endsnippet

snippet ssec "subsection" bA
\subsection{$1}
$0
endsnippet

snippet seec "subsubsection" bA
\subsubsection{$1}
$0
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb=where?}]
	\centering
	\includegraphics[width=$2\textwidth]{$3}
	\caption*{$4}
\end{figure}
endsnippet

snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

snippet ka "Kahler"
Kähler 
endsnippet

context "tx()"
snippet Cech "Cech" iA
Čech
endsnippet


context "tx()"
snippet 'i "i" iA
í
endsnippet

context "tx()"
snippet 'e "e" iA
é
endsnippet

context "tx()"
snippet 'a "a" iA
á
endsnippet

context "tx()"
snippet 'o "o" iA
ó
endsnippet

context "tx()"
snippet 'u "u" iA
ú
endsnippet

context "tx()"
snippet 'A "A" iA
Á
endsnippet

context "tx()"
snippet 'E "E" iA
É
endsnippet

context "tx()"
snippet 'I "Description" options
Í
endsnippet

context "tx()"
snippet 'O "Description" options
Ó
endsnippet

context "tx()"
snippet 'U "Description" options
Ú
endsnippet

snippet ~a "a" iA
\~a
endsnippet

snippet \leav "leavevmode" iA
\leavevmode
endsnippet

snippet toc "toc" bA
\tableofcontents
endsnippet

snippet quot "quotation" bA
\begin{quotation}
	$1
\end{quotation}
$0
endsnippet

snippet Kah "khaler" iA
Kähler`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet Grun "grunbaum" iA
Gr\"unbraum
endsnippet

snippet Gol "golebiewski" iA
Go\l\c ebiewski
endsnippet

snippet ... "dots" iA
…
endsnippet

priority 1
snippet c1 "color" iA
{\color{1}$2}$0
endsnippet

snippet c2 "color" iA	
{\color{2}$2}$0
endsnippet
snippet c3 "color" iA	
{\color{3}$2}$0
endsnippet
snippet c4 "color" iA	
{\color{4}$2}$0
endsnippet
snippet c5 "color" iA	
{\color{5}$2}$0
endsnippet
snippet c6 "color" iA	
{\color{6}$2}$0
endsnippet
snippet c7 "color" iA	
{\color{7}$2}$0
endsnippet
snippet c8 "color" iA	
{\color{8}$2}$0
endsnippet
snippet c9 "color" iA
{\color{9}$2}$0
endsnippet
snippet c10 "color" iA	
{\color{10}$2}$0
endsnippet
snippet c11 "color" iA	
{\color{11}$2}$0
endsnippet
snippet c12 "color" iA	
{\color{12}$2}$0
endsnippet
snippet c13 "color" iA	
{\color{13}$2}$0
endsnippet
snippet c14 "color" iA	
{\color{14}$2}$0
endsnippet
snippet c15 "color" iA	
{\color{15}$2}$0
endsnippet
snippet c16 "color" iA	
{\color{16}$2}$0
endsnippet
snippet c17 "color" iA	
{\color{17}$2}$0
endsnippet
snippet c18 "color" iA	
{\color{18}$2}$0
endsnippet
snippet c19 "color" iA
{\color{19}$2}$0
endsnippet

snippet blue "blue" i
{\color{blue}$1}$0
endsnippet

snippet orng "orange" iA
{\color{orange}$1}$0
endsnippet

snippet persi "persimon" iA
{\color{persimmon}$1}$0
endsnippet

snippet lvmg "lavendermgn" iA
{\color{lavendermagenta}$1}$0
endsnippet

snippet blv "blue-violet" iA
{\color{blue-violet}$1}$0
endsnippet

snippet mgn "magenta" iA
{\color{magenta}$1}$0
endsnippet

snippet cyan "cyan" iA
{\color{cyan}$1}$0
endsnippet

snippet dbar "dbar" iA
$\bar\partial$
endsnippet

snippet tm "item" bA
\item 
endsnippet

snippet leav "leavevmode" iA
\leavevmode 
endsnippet

snippet math "MathdaniBooks" i
~/daniDrive/Otros/daniBooks/Mathematics/
endsnippet

snippet nnn "n" iA
$n$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet fff "function" iA
$f$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet nth "nth" iA
$n$-th
endsnippet

#attempt
#snippet '([A-Za-z])([A-Za-z])' "Description" options
#$([A-Za-z])([A-Za-z])
#endsnippet


#Something that maps any letter twice to $theletter$
#context "tx()"
#snippet '([A-Za-z])()' "auto superscript" wrA
#`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`$1}$0
#endsnippet

snippet iff "iff" i
if and only if 
endsnippet

snippet sii "sii" iA
si y s\'olo si`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

snippet Freuden "Freudenthal" iA
Freudenthal 
endsnippet

snippet \if "iffase" iA
\iffalse
endsnippet

snippet txx "texttt" iA
\texttt{$1}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet Cn "complex" iA
$\mathbb{C}^{$1}$
endsnippet


context "tx()"
snippet Rn "real" iA
$\mathbb{R}^{$1}$
endsnippet

context "tx()"
snippet \cc "c with hook" iA
ç
endsnippet

context "tx()"
snippet ^a "hat" iA
â
endsnippet

context "tx()"
snippet ^o "hat" iA
ô
endsnippet

context "tx()"
snippet ^e "hat" iA
ê
endsnippet

context "tx()"
snippet …a "atilde" iA
ã
endsnippet

context "tx()"
snippet …o "otilde" iA
õ
endsnippet

context "tx()"
snippet ~o "otilde" iA
õ
endsnippet

priority 3
context "tx()"
snippet cao "cao" iA 
ção`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$1
endsnippet

context "tx()"
snippet coes "coes" iA
ções`!p
if t[1] and t[1][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$0
endsnippet

context "tx()"
snippet `a "a" iA
à
endsnippet

context "tx()"
snippet cite "cite" iA
\cite{$1}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet viz "viz" iA
vizinhança`!p
if t[2] and t[2][0] not in ['s',',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet ed "end document" bA
\end{document}
endsnippet

context "tx()"
snippet pb "print bibliogrphy" bA
\printbibliography
endsnippet

context "tx()"
snippet tc "table of contents" bA
\tableofcontents
endsnippet

context "tx()"
snippet fr "frame" bA
\begin{frame}
	$1
\end{frame}$0
endsnippet

context "tx()"
snippet Tei "Techmuller" iA
Teichmüler`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet nao "nao" iA
não`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet Ao "ao" iA
ão`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet ep "end proof" bA
\end{proof}
endsnippet

context "tx()"
snippet [a "à" iA
à
endsnippet

context "tx()"
snippet {e "ê" iA
ê
endsnippet

context "tx()"
snippet {a "â" iA
â
endsnippet



context "tx()"
snippet sao "sao" iA
são
endsnippet

context "tx()"
snippet bdef "bdef" bA
\begin{defn}
endsnippet

context "tx()"
snippet edef "bdsa" bA
\end{defn}
endsnippet

context "tx()"
snippet erk "end remark" bA
\end{remark}
endsnippet

priority 1
context "tx()"
snippet '([A-Za-z])C' "autosuperscript" wrA
`!p snip.rv = match.group(1)`ç
endsnippet

priority 1
context "tx()"
snippet '([A-Za-z])A' "autosuperscript" wrA
`!p snip.rv = match.group(1)`ã
endsnippet

context "tx()"
snippet '([A-Za-z])O' "autosuperscript" wrA
`!p snip.rv = match.group(1)`õ
endsnippet

context "tx()"
snippet 'çO' "autosuperscript" wrA
çõ
endsnippet

context "tx()"
snippet 'çA' "autosuperscript" wrA
çã
endsnippet

priority 2
context "tx()"
snippet CC "Description" iA
$C$`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet


context "tx()"
snippet "o "o" iA
ö
endsnippet

context "tx()"
snippet æo "o" iA
ö
endsnippet

priority 2
context "tx()"
snippet AA "Description" iA
$A$`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet jan1 "jan1" iA
\texttt{jan1.pdf}`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet pdf "pdf" iA
\texttt{$1.pdf}
endsnippet

context "tx()"
snippet Mob "Description" iA
Möbius`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet vs "Description" bA
\vspace{$1em}
endsnippet

context "tx()"
snippet bp "Beginning of paragrap" bA
{\color{$1}\bfseries $2.}\hspace{.5em}$0
endsnippet
context "tx()"
snippet bp "Beginning of paragrap" i
{\color{$1}\bfseries $2.}\hspace{.5em}$0
endsnippet

context "tx()"
snippet pp "Beginning of paragrap parenth" bA
{\color{$1}\bfseries ($2.)}\hspace{.5em}$0
endsnippet
context "tx()"

snippet nei "neighbo" iA
neighbourhood`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^','s']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet hs "hspace" i
\hspace{0.5em}
endsnippet

context "tx()"
snippet Weie "Description" iA
Weierstrass`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "tx()"
snippet soc "soluçao" bA
\begin{proof}[Solução]\leavevmode
	$1
\end{proof}
endsnippet

context "tx()"
snippet ei "end idea" bA
\end{idea$1}
endsnippet

context "tx()"
snippet ac "add contents line" i
\addcontentsline{toc}{${1:section}}{$2}
endsnippet

priority 2
context "tx()"
snippet ao "ao" iA
ão`!p
if t[2] and t[2][0] not in [',', '.', '_', '?', '-', ' ','(','^']:
     snip.rv = ' '
else:
     snip.rv = ''
`$2
endsnippet

context "math()"
snippet bet "beta" iA
\beta
endsnippet

priority 2 
context "math()"
snippet alp "alpha" iA
\alpha
endsnippet

priority 1
context "math()"
snippet MM "Description" iA
\mathcal{M}_{$1}($2})
endsnippet

context "math()"
snippet cli "Description" iA
\mathcal{C}^\infty_{\operatorname{lin}}($1)
endsnippet

priority 10
context "math()"
snippet Disc "an operator" iA
\operatorname{Disc}($1)
endsnippet

